# Builds a final release version and pushes to nuget.org 
# whenever a release is published.
# Requires: secrets.NUGET_API_KEY

name: publish
on:
  release:
    types: [prereleased, released]

env:
  DOTNET_NOLOGO: true
  Configuration: Release
  PackOnBuild: true
  GeneratePackageOnBuild: true
  VersionLabel: ${{ github.ref }}
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  MSBUILDTERMINALLOGGER: auto
    
jobs:
  publish:
    runs-on: ${{ vars.PUBLISH_AGENT || 'ubuntu-latest' }}
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v4
        with: 
          submodules: recursive
          fetch-depth: 0

      - name: ⚙ dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.x
            8.x
            9.x

      - name: 🙏 build
        run: dotnet build -m:1 -bl:build.binlog

      - name: 🧪 test
        run: |
          dotnet tool update -g dotnet-retest
          dotnet retest -- --no-build

      - name: 🐛 logs
        uses: actions/upload-artifact@v4
        if: runner.debug && always()
        with:
          name: logs
          path: '*.binlog'

      - name: 🚀 nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        if: ${{ env.NUGET_API_KEY != '' && github.event.action != 'prereleased' }}
        working-directory: bin
        run: dotnet nuget push *.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate

      - name: 🚀 sleet
        env:
          SLEET_CONNECTION: ${{ secrets.SLEET_CONNECTION }}
        if: env.SLEET_CONNECTION != ''
        run: |
          dotnet tool update sleet -g --allow-downgrade --version $(curl -s --compressed ${{ vars.SLEET_FEED_URL }} | jq '.["sleet:version"]' -r)        
          sleet push bin --config none -f --verbose -p "SLEET_FEED_CONTAINER=nuget" -p "SLEET_FEED_CONNECTIONSTRING=${{ secrets.SLEET_CONNECTION }}" -p "SLEET_FEED_TYPE=azure" || echo "No packages found"
